package com.example.fooddeliveryaut.controller;
import com.example.fooddeliveryaut.dto.ApiResponse;
import com.example.fooddeliveryaut.dto.AuthResponseDto;
import com.example.fooddeliveryaut.dto.LoginRequestDto;
import com.example.fooddeliveryaut.dto.UserResponseDto;
import com.example.fooddeliveryaut.service.AuthService;
import jakarta.validation.Valid;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.LockedException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.*;

import javax.naming.AuthenticationException;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@Slf4j
public class AuthController {

    private final AuthService authService;


    @PostMapping("/login")
    public AuthResponseDto login(@Valid @RequestBody LoginRequestDto loginRequest) throws AuthenticationException {
        log.info("üîó [INTER-SERVICE] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());

        try {
            AuthResponseDto authResponse = authService.login(loginRequest);

            log.info("‚úÖ [INTER-SERVICE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (ID: {})",
                    loginRequest.getEmail(), authResponse.getUser().getId());

            return authResponse;

        } catch (BadCredentialsException e) {
            log.warn("‚ùå [INTER-SERVICE] –ù–µ–≤–µ—Ä–Ω—ã–µ credentials –¥–ª—è email: {} - {}",
                    loginRequest.getEmail(), e.getMessage());
            throw new BadCredentialsException("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");

        } catch (UsernameNotFoundException e) {
            log.warn("‚ùå [INTER-SERVICE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {} - {}",
                    loginRequest.getEmail(), e.getMessage());
            throw new BadCredentialsException("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");

        } catch (DisabledException e) {
            log.warn("‚ùå [INTER-SERVICE] –ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {} - {}",
                    loginRequest.getEmail(), e.getMessage());
            throw new DisabledException("–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω");

        } catch (LockedException e) {
            log.warn("‚ùå [INTER-SERVICE] –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {} - {}",
                    loginRequest.getEmail(), e.getMessage());
            throw new LockedException("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");

        } catch (Exception e) {
            log.error("‚ùå [INTER-SERVICE] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è email: {} - {}",
                    loginRequest.getEmail(), e.getMessage(), e);
            throw new AuthenticationException("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        }
    }

    /**
     * üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É - –î–õ–Ø –ú–ï–ñ–°–ï–†–í–ò–°–ù–´–• –í–´–ó–û–í–û–í
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
     */
    @GetMapping("/user-by-token")
    public ResponseEntity<UserResponseDto> getUserByToken(
            @RequestHeader("Authorization") String authHeader) {

        log.debug("üîó [INTER-SERVICE] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É");

        try {
            String token = authHeader.substring(7);
            UserResponseDto user = authService.getCurrentUser(token);

            log.debug("‚úÖ [INTER-SERVICE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {}", user.getEmail());

            // ‚úÖ –ü–†–Ø–ú–û–ô DTO –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            return ResponseEntity.ok(user);

        } catch (Exception e) {
            log.error("‚ùå [INTER-SERVICE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());
            // ‚ùå –î–ª—è –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ - HTTP —Å—Ç–∞—Ç—É—Å –±–µ–∑ —Ç–µ–ª–∞
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }

    /**
     * üîó –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ - –î–õ–Ø –ú–ï–ñ–°–ï–†–í–ò–°–ù–´–• –í–´–ó–û–í–û–í
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ true/false –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    @PostMapping("/validate-token-simple")
    public ResponseEntity<Boolean> validateTokenSimple(
            @RequestHeader("Authorization") String authHeader) {

        log.debug("üîó [INTER-SERVICE] –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞");

        try {
            String token = authHeader.substring(7);
            authService.getCurrentUser(token); // –ï—Å–ª–∏ –Ω–µ –±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω

            log.debug("‚úÖ [INTER-SERVICE] –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω");
            return ResponseEntity.ok(true);

        } catch (Exception e) {
            log.debug("‚ùå [INTER-SERVICE] –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {}", e.getMessage());
            return ResponseEntity.ok(false);
        }
    }

    // ========== –ö–õ–ò–ï–ù–¢–°–ö–ò–ï ENDPOINTS (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞) ==========

    /**
     * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—ã–π ApiResponse –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
     */
    @GetMapping("/me")
    public ResponseEntity<ApiResponse<UserResponseDto>> getCurrentUser(
            @RequestHeader("Authorization") String authHeader) {

        log.debug("üë§ [CLIENT] –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");

        try {
            String token = authHeader.substring(7);
            UserResponseDto user = authService.getCurrentUser(token);

            return ResponseEntity.ok(
                    ApiResponse.success(user, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞")
            );

        } catch (Exception e) {
            log.error("‚ùå [CLIENT] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", "USER_INFO_ERROR"));
        }
    }

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ - –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
     */
    @PostMapping("/validate-token")
    public ResponseEntity<ApiResponse<TokenValidationDto>> validateToken(
            @RequestHeader("Authorization") String authHeader) {

        log.debug("‚úÖ [CLIENT] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞");

        try {
            String token = authHeader.substring(7);
            UserResponseDto user = authService.getCurrentUser(token);

            TokenValidationDto validation = TokenValidationDto.builder()
                    .valid(true)
                    .userId(user.getId())
                    .email(user.getEmail())
                    .role(user.getUserRole().toString())
                    .hasLocation(user.getHasLocation())
                    .locationStatus(user.getLocationStatus())
                    .build();

            return ResponseEntity.ok(
                    ApiResponse.success(validation, "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            );

        } catch (Exception e) {
            TokenValidationDto validation = TokenValidationDto.builder()
                    .valid(false)
                    .build();

            return ResponseEntity.ok(
                    ApiResponse.success(validation, "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            );
        }
    }

    /**
     * üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã - –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í
     */
    @PostMapping("/logout")
    public ResponseEntity<ApiResponse<LogoutResponseDto>> logout(
            @RequestHeader("Authorization") String authHeader) {

        try {
            String token = authHeader.substring(7);
            UserResponseDto user = authService.getCurrentUser(token);

            log.info("üö™ [CLIENT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã", user.getEmail());

            // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ blacklist –≤ –±—É–¥—É—â–µ–º
            // blacklistService.addToBlacklist(token);

            LogoutResponseDto logoutResponse = LogoutResponseDto.builder()
                    .success(true)
                    .userEmail(user.getEmail())
                    .logoutTime(java.time.LocalDateTime.now())
                    .message("–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
                    .build();

            return ResponseEntity.ok(
                    ApiResponse.success(logoutResponse, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
            );

        } catch (Exception e) {
            log.warn("‚ùå [CLIENT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {}", e.getMessage());

            LogoutResponseDto logoutResponse = LogoutResponseDto.builder()
                    .success(true) // –í—Å—ë —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                    .message("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    .logoutTime(java.time.LocalDateTime.now())
                    .build();

            return ResponseEntity.ok(
                    ApiResponse.success(logoutResponse, "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω")
            );
        }
    }

    /**
     * üß™ –¢–µ—Å—Ç–æ–≤—ã–π endpoint - –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í
     */
    @GetMapping("/test")
    public ResponseEntity<ApiResponse<ServiceHealthDto>> test() {
        ServiceHealthDto health = ServiceHealthDto.builder()
                .serviceName("Auth Service")
                .status("UP")
                .message("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                .version("1.0.0")
                .timestamp(java.time.LocalDateTime.now())
                .build();

        return ResponseEntity.ok(
                ApiResponse.success(health, "–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        );
    }

    // ========== DTO –ö–õ–ê–°–°–´ ==========

    /**
     * DTO –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
     */
    @Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class TokenValidationDto {
        private Boolean valid;
        private Long userId;
        private String email;
        private String role;
        private Boolean hasLocation;
        private String locationStatus;
    }

    /**
     * DTO –¥–ª—è –æ—Ç–≤–µ—Ç–∞ logout
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class LogoutResponseDto {
        private Boolean success;
        private String userEmail;
        private String message;
        private java.time.LocalDateTime logoutTime;
    }

    /**
     * DTO –¥–ª—è health check
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class ServiceHealthDto {
        private String serviceName;
        private String status;
        private String message;
        private String version;
        private java.time.LocalDateTime timestamp;
    }

    // ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ==========

    /**
     * ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π - –¢–û–õ–¨–ö–û –î–õ–Ø –ö–õ–ò–ï–ù–¢–°–ö–ò–• ENDPOINTS
     * –ú–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–µ endpoints –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ—à–∏–±–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
     */
    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<ApiResponse<Object>> handleRuntimeException(RuntimeException e) {
        log.error("‚ùå –û—à–∏–±–∫–∞ –≤ AuthController: {}", e.getMessage());

        HttpStatus status = HttpStatus.BAD_REQUEST;
        String errorCode = "GENERAL_ERROR";

        if (e.getMessage().contains("Invalid credentials") || e.getMessage().contains("–ù–µ–≤–µ—Ä–Ω—ã–π")) {
            status = HttpStatus.UNAUTHORIZED;
            errorCode = "INVALID_CREDENTIALS";
        } else if (e.getMessage().contains("—Ç–æ–∫–µ–Ω") || e.getMessage().contains("token")) {
            status = HttpStatus.UNAUTHORIZED;
            errorCode = "TOKEN_ERROR";
        } else if (e.getMessage().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω") || e.getMessage().contains("not found")) {
            status = HttpStatus.NOT_FOUND;
            errorCode = "USER_NOT_FOUND";
        }

        return ResponseEntity.status(status)
                .body(ApiResponse.error(e.getMessage(), errorCode));
    }

    /**
     * ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    @ExceptionHandler(org.springframework.web.bind.MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponse<Object>> handleValidationException(
            org.springframework.web.bind.MethodArgumentNotValidException e) {

        String errorMessage = e.getBindingResult()
                .getFieldErrors()
                .stream()
                .map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(java.util.stream.Collectors.joining(", "));

        return ResponseEntity.badRequest()
                .body(ApiResponse.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " + errorMessage, "VALIDATION_ERROR"));
    }
}