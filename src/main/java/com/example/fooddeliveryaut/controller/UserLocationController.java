package com.example.fooddeliveryaut.controller;
import com.example.fooddeliveryaut.dto.*;
import com.example.fooddeliveryaut.service.UserLocationService;
import com.example.fooddeliveryaut.util.JwtUtil;
import jakarta.validation.Valid;
import lombok.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
@Slf4j
public class UserLocationController {

    private final UserLocationService userLocationService;
    private final JwtUtil jwtUtil;

    /**
     * üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞)
     */
    @PutMapping("/me/location")
    public ResponseEntity<ApiResponse<UserResponseDto>> updateUserLocation(
            @Valid @RequestBody UpdateUserLocationDto locationDto,
            @RequestHeader("Authorization") String authHeader) {

        try {
            Long userId = getUserIdFromToken(authHeader);

            log.info("üåç –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: [{}, {}]",
                    userId, locationDto.getLatitude(), locationDto.getLongitude());

            UserResponseDto updatedUser = userLocationService.updateUserLocation(userId, locationDto);

            return ResponseEntity.ok(
                    ApiResponse.success(updatedUser, "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: " + e.getMessage()));
        }
    }

    /**
     * üè† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    @PutMapping("/me/address")
    public ResponseEntity<ApiResponse<UserResponseDto>> updateUserAddress(
            @Valid @RequestBody UpdateUserAddressDto addressDto,
            @RequestHeader("Authorization") String authHeader) {

        try {
            Long userId = getUserIdFromToken(authHeader);

            log.info("üè† –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}, {}",
                    userId, addressDto.getStreet(), addressDto.getCity());

            UserResponseDto updatedUser = userLocationService.updateUserAddress(userId, addressDto);

            return ResponseEntity.ok(
                    ApiResponse.success(updatedUser, "–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: " + e.getMessage()));
        }
    }

    /**
     * üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/me/location")
    public ResponseEntity<ApiResponse<UserLocationDto>> getUserLocation(
            @RequestHeader("Authorization") String authHeader) {

        try {
            Long userId = getUserIdFromToken(authHeader);

            log.debug("üìç –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);

            UserLocationDto locationDto = userLocationService.getUserLocation(userId);

            return ResponseEntity.ok(
                    ApiResponse.success(locationDto,
                            locationDto.getHasLocation() ? "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞" : "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: " + e.getMessage()));
        }
    }

    /**
     * üîç –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
     */
    @PostMapping("/me/nearby-stores")
    public ResponseEntity<ApiResponse<List<NearbyStoreDto>>> findNearbyStores(
            @Valid @RequestBody FindNearbyStoresDto searchDto,
            @RequestHeader("Authorization") String authHeader) {

        try {
            Long userId = getUserIdFromToken(authHeader);
            long startTime = System.currentTimeMillis(); // –î–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏

            log.info("üîç –ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –≤ —Ä–∞–¥–∏—É—Å–µ {} –∫–º",
                    userId, searchDto.getRadiusKm());

            List<NearbyStoreDto> nearbyStores = userLocationService.findNearbyStores(userId, searchDto);

            String message = String.format("–ù–∞–π–¥–µ–Ω–æ %d –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ %d –∫–º",
                    nearbyStores.size(), searchDto.getRadiusKm());

            // üåç –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            ApiMetadata  metadata = ApiMetadata.nearbyStores(
                    nearbyStores.size(),                    // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                    searchDto.getRadiusKm().doubleValue(),  // —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId,              // —Ü–µ–Ω—Ç—Ä –ø–æ–∏—Å–∫–∞
                    "distance",                            // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                    buildFilterString(searchDto)           // —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            ).withExecutionTime(System.currentTimeMillis() - startTime);

            return ResponseEntity.ok(
                    ApiResponse.success(nearbyStores, message, metadata)
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: " + e.getMessage()));
        }
    }

    /**
     * üîç –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ (GET —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
     */
    @GetMapping("/me/nearby-stores")
    public ResponseEntity<ApiResponse<List<NearbyStoreDto>>> getNearbyStores(
            @RequestParam(defaultValue = "10") Integer radiusKm,
            @RequestParam(defaultValue = "20") Integer limit,
            @RequestParam(required = false) String category,
            @RequestParam(required = false) Double minRating,
            @RequestParam(defaultValue = "true") Boolean onlyOpen,
            @RequestHeader("Authorization") String authHeader) {

        try {
            Long userId = getUserIdFromToken(authHeader);
            long startTime = System.currentTimeMillis();

            log.info("üîç –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (—Ä–∞–¥–∏—É—Å: {} –∫–º)",
                    userId, radiusKm);

            // –°–æ–∑–¥–∞–µ–º DTO –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ query
            FindNearbyStoresDto searchDto = FindNearbyStoresDto.builder()
                    .radiusKm(radiusKm)
                    .limit(limit)
                    .category(category)
                    .minRating(minRating)
                    .onlyOpen(onlyOpen)
                    .build();

            List<NearbyStoreDto> nearbyStores = userLocationService.findNearbyStores(userId, searchDto);

            String message = String.format("–ù–∞–π–¥–µ–Ω–æ %d –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ %d –∫–º",
                    nearbyStores.size(), radiusKm);

            // üåç –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
            ApiMetadata metadata = ApiMetadata.geoSearch(
                            nearbyStores.size(),
                            radiusKm.doubleValue(),
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId
                    ).withExecutionTime(System.currentTimeMillis() - startTime)
                    .withFilter(buildSimpleFilterString(category, minRating, onlyOpen));

            return ResponseEntity.ok(
                    ApiResponse.success(nearbyStores, message, metadata)
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤: " + e.getMessage()));
        }
    }

    /**
     * üìè –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
     */
    @GetMapping("/me/distance-to-store/{storeId}")
    public ResponseEntity<ApiResponse<DistanceCalculationDto>> getDistanceToStore(
            @PathVariable Long storeId,
            @RequestHeader("Authorization") String authHeader) {

        try {
            Long userId = getUserIdFromToken(authHeader);
            long startTime = System.currentTimeMillis();

            log.debug("üìè –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –¥–æ –º–∞–≥–∞–∑–∏–Ω–∞ {}", userId, storeId);

            DistanceCalculationDto distanceDto = userLocationService.calculateDistanceToStore(userId, storeId);

            String message = String.format("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–∞–≥–∞–∑–∏–Ω–∞ '%s': %s",
                    distanceDto.getStoreName(), distanceDto.getDistanceText());

            // üìè –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            ApiMetadata  metadata = ApiMetadata.withCount(1)
                    .withExecutionTime(System.currentTimeMillis() - startTime);

            return ResponseEntity.ok(
                    ApiResponse.success(distanceDto, message, metadata)
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: " + e.getMessage()));
        }
    }

    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @DeleteMapping("/me/location")
    public ResponseEntity<ApiResponse<UserResponseDto>> clearUserLocation(
            @RequestHeader("Authorization") String authHeader) {

        try {
            Long userId = getUserIdFromToken(authHeader);

            log.info("üßπ –ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);

            UserResponseDto updatedUser = userLocationService.clearUserLocation(userId);

            return ResponseEntity.ok(
                    ApiResponse.success(updatedUser, "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: " + e.getMessage()));
        }
    }

    /**
     * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     */
    @GetMapping("/location-stats")
    public ResponseEntity<ApiResponse<UserLocationStatsDto>> getLocationStats(
            @RequestHeader("Authorization") String authHeader) {

        try {
            Long userId = getUserIdFromToken(authHeader);
            long startTime = System.currentTimeMillis();

            // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
            // String userRole = getUserRoleFromToken(authHeader);
            // if (!"ADMIN".equals(userRole)) {
            //     return ResponseEntity.status(HttpStatus.FORBIDDEN)
            //             .body(ApiResponse.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."));
            // }

            log.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);

            UserLocationStatsDto stats = userLocationService.getUserLocationStats();

            String message = String.format("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (%.1f%% —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π)",
                    stats.getTotalUsers(), stats.getLocationCoverage());

            // üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            ApiMetadata metadata = ApiMetadata.withTotalCount(
                            stats.getTopCities().size(),           // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
                            stats.getTotalUsers()                  // –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    ).withExecutionTime(System.currentTimeMillis() - startTime)
                    .withVersion("v1.0")
                    .withSort("userCount", "DESC");

            return ResponseEntity.ok(
                    ApiResponse.success(stats, message, metadata)
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage()));
        }
    }

    /**
     * üÜî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
     */
    @GetMapping("/me/location/status")
    public ResponseEntity<ApiResponse<LocationStatusDto>> getLocationStatus(
            @RequestHeader("Authorization") String authHeader) {

        try {
            Long userId = getUserIdFromToken(authHeader);

            UserLocationDto location = userLocationService.getUserLocation(userId);

            LocationStatusDto status = LocationStatusDto.builder()
                    .hasLocation(location.getHasLocation())
                    .lastUpdated(location.getLocationUpdatedAt())
                    .city(location.getCity())
                    .country(location.getCountry())
                    .shortAddress(location.getShortAddress())
                    .build();

            return ResponseEntity.ok(
                    ApiResponse.success(status, "–°—Ç–∞—Ç—É—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω")
            );

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {}", e.getMessage());
            return ResponseEntity.badRequest()
                    .body(ApiResponse.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: " + e.getMessage()));
        }
    }

    // === UTILITY –ú–ï–¢–û–î–´ ===

    /**
     * üîê –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JwtUtil
     */
    private Long getUserIdFromToken(String authHeader) {
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            throw new RuntimeException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Authorization header");
        }

        String token = authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º "Bearer "

        if (!jwtUtil.validateToken(token)) {
            throw new RuntimeException("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω");
        }

        return jwtUtil.getUserIdFromToken(token);
    }

    /**
     * üîê –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è userId —á–µ—Ä–µ–∑ SecurityContext
     * –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Spring Security
     */
    private Long getUserIdFromSecurityContext() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication == null || !authentication.isAuthenticated()) {
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω");
        }

        String email = authentication.getName();

        // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID —á–µ—Ä–µ–∑ email, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // User user = userService.findByEmail(email);
        // return user.getId();

        // –ò–ª–∏ –µ—Å–ª–∏ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ
        String authHeader = getCurrentAuthHeader();
        return getUserIdFromToken(authHeader);
    }

    /**
     * üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
     */
    private String getUserRoleFromToken(String authHeader) {
        String token = authHeader.substring(7);

        // –ï—Å–ª–∏ –≤ JwtUtil –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏
        // return jwtUtil.getRoleFromToken(token);

        // –ò–ª–∏ —á–µ—Ä–µ–∑ Spring Security
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.getAuthorities() != null) {
            return authentication.getAuthorities().iterator().next().getAuthority();
        }

        return "USER"; // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    }

    /**
     * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ Authorization header (–¥–ª—è SecurityContext –º–µ—Ç–æ–¥–∞)
     */
    private String getCurrentAuthHeader() {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ getUserIdFromSecurityContext()
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ header –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
        return "Bearer " + getCurrentToken();
    }

    private String getCurrentToken() {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ SecurityContext –∏–ª–∏ Request
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        return "";
    }

    /**
     * üîç –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    private String buildFilterString(FindNearbyStoresDto searchDto) {
        StringBuilder filters = new StringBuilder();

        if (searchDto.getCategory() != null) {
            filters.append("category:").append(searchDto.getCategory());
        }

        if (searchDto.getMinRating() != null) {
            if (filters.length() > 0) filters.append(", ");
            filters.append("minRating:").append(searchDto.getMinRating());
        }

        if (Boolean.TRUE.equals(searchDto.getOnlyOpen())) {
            if (filters.length() > 0) filters.append(", ");
            filters.append("onlyOpen:true");
        }

        if (searchDto.getLimit() != null) {
            if (filters.length() > 0) filters.append(", ");
            filters.append("limit:").append(searchDto.getLimit());
        }

        return filters.length() > 0 ? filters.toString() : null;
    }

    /**
     * üîç –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    private String buildSimpleFilterString(String category, Double minRating, Boolean onlyOpen) {
        StringBuilder filters = new StringBuilder();

        if (category != null) {
            filters.append("category:").append(category);
        }

        if (minRating != null) {
            if (filters.length() > 0) filters.append(", ");
            filters.append("minRating:").append(minRating);
        }

        if (Boolean.TRUE.equals(onlyOpen)) {
            if (filters.length() > 0) filters.append(", ");
            filters.append("onlyOpen:true");
        }

        return filters.length() > 0 ? filters.toString() : null;
    }

    /**
     * ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<ApiResponse<Object>> handleRuntimeException(RuntimeException e) {
        log.error("‚ùå –û—à–∏–±–∫–∞ –≤ UserLocationController: {}", e.getMessage());

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        HttpStatus status = HttpStatus.BAD_REQUEST;
        String errorCode = "GENERAL_ERROR";

        if (e.getMessage().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω")) {
            status = HttpStatus.NOT_FOUND;
            errorCode = "NOT_FOUND";
        } else if (e.getMessage().contains("—Ç–æ–∫–µ–Ω") || e.getMessage().contains("–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")) {
            status = HttpStatus.UNAUTHORIZED;
            errorCode = "UNAUTHORIZED";
        } else if (e.getMessage().contains("–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")) {
            status = HttpStatus.FORBIDDEN;
            errorCode = "FORBIDDEN";
        } else if (e.getMessage().contains("–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")) {
            status = HttpStatus.BAD_REQUEST;
            errorCode = "LOCATION_NOT_SET";
        }

        return ResponseEntity.status(status)
                .body(ApiResponse.error(e.getMessage(), errorCode));
    }

    /**
     * ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    @ExceptionHandler(org.springframework.web.bind.MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponse<Object>> handleValidationException(
            org.springframework.web.bind.MethodArgumentNotValidException e) {

        String errorMessage = e.getBindingResult()
                .getFieldErrors()
                .stream()
                .map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(java.util.stream.Collectors.joining(", "));

        return ResponseEntity.badRequest()
                .body(ApiResponse.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " + errorMessage, "VALIDATION_ERROR"));
    }
}

