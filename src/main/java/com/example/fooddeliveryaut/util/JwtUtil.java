package com.example.fooddeliveryaut.util;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;
@Component
@Slf4j
public class JwtUtil {

    @Value("${jwt.secret:mySecretKey1234567890123456789012345678901234567890}")
    private String jwtSecret;

    @Value("${jwt.expiration:86400000}") // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    private long jwtExpiration;

    @Value("${jwt.expiration.remember-me:604800000}") // 7 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    private long jwtRememberMeExpiration;

    private SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(jwtSecret.getBytes());
    }

    /**
     * üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public String generateToken(String email, Long userId, String role) {
        return generateTokenWithExpiration(email, userId, role, jwtExpiration);
    }

    /**
     * üç™ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω —Å Remember Me (7 –¥–Ω–µ–π)
     */
    public String generateRememberMeToken(String email, Long userId, String role) {
        return generateTokenWithExpiration(email, userId, role, jwtRememberMeExpiration);
    }

    /**
     * üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
     */
    public String generateTokenWithExpiration(String email, Long userId, String role, long expiration) {
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + expiration);

        return Jwts.builder()
                .setSubject(email)
                .claim("userId", userId)
                .claim("role", role)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    public String getEmailFromToken(String token) {
        Claims claims = getClaimsFromToken(token);
        return claims.getSubject();
    }

    public Long getUserIdFromToken(String token) {
        Claims claims = getClaimsFromToken(token);
        return claims.get("userId", Long.class);
    }

    public String getRoleFromToken(String token) {
        Claims claims = getClaimsFromToken(token);
        return claims.get("role", String.class);
    }

    public boolean validateToken(String token) {
        try {
            getClaimsFromToken(token);
            return true;
        } catch (MalformedJwtException e) {
            log.error("–ù–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω: {}", e.getMessage());
        } catch (ExpiredJwtException e) {
            log.error("JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            log.error("JWT —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            log.error("JWT claims –ø—É—Å—Ç–æ–π: {}", e.getMessage());
        }
        return false;
    }

    private Claims getClaimsFromToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
}