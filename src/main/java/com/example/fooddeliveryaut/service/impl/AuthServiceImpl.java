package com.example.fooddeliveryaut.service.impl;

import com.example.fooddeliveryaut.dto.AuthResponseDto;
import com.example.fooddeliveryaut.dto.LoginRequestDto;
import com.example.fooddeliveryaut.dto.UserResponseDto;
import com.example.fooddeliveryaut.mapper.UserMapper;
import com.example.fooddeliveryaut.model.User;
import com.example.fooddeliveryaut.service.AuthService;
import com.example.fooddeliveryaut.service.UserService;
import com.example.fooddeliveryaut.util.JwtUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.List;

@Service
@Slf4j
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {

    private final UserService userService;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;
    private final UserMapper userMapper;

    @Override
    @Transactional
    public AuthResponseDto login(LoginRequestDto loginRequest) {
        log.info("–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", loginRequest.getEmail());

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = userService.findByEmail(loginRequest.getEmail());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if (!passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
            throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        String token = jwtUtil.generateToken(
                user.getEmail(),
                user.getId(),
                user.getUserRole().getAuthority()
        );

        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        UserResponseDto userDto = userMapper.toResponseDto(user);

        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", user.getEmail());

        return AuthResponseDto.builder()
                .token(token)
                .user(userDto)
                .build();
    }

    @Override
    @Transactional(readOnly = true)
    public boolean validateCredentials(String email, String password) {
        try {
            User user = userService.findByEmail(email);
            return passwordEncoder.matches(password, user.getPassword());
        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è email: {}", email);
            return false;
        }
    }

    @Override
    @Transactional(readOnly = true)
    public UserResponseDto getCurrentUser(String token) {
        if (!jwtUtil.validateToken(token)) {
            throw new RuntimeException("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω");
        }

        String email = jwtUtil.getEmailFromToken(token);
        User user = userService.findByEmail(email);

        return userMapper.toResponseDto(user);
    }

    /**
     * üîê –†–µ–∞–ª–∏–∑–∞—Ü–∏—è UserDetailsService –¥–ª—è Spring Security
     */
    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        log.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: {}", email);

        try {
            User user = userService.findByEmail(email);

            // –°–æ–∑–¥–∞–µ–º authorities –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
            List<GrantedAuthority> authorities = Collections.singletonList(
                    new SimpleGrantedAuthority(user.getUserRole().getAuthority())
            );

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Spring Security User
            return org.springframework.security.core.userdetails.User.builder()
                    .username(user.getEmail())
                    .password(user.getPassword())
                    .authorities(authorities)
                    .accountExpired(false)
                    .accountLocked(false)
                    .credentialsExpired(false)
                    .disabled(false) // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ isActive –≤ –±—É–¥—É—â–µ–º
                    .build();

        } catch (Exception e) {
            log.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", email);
            throw new UsernameNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email " + email + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }
}