package com.example.fooddeliveryaut.service.impl;

import com.example.fooddeliveryaut.config.LocationConfigProperties;
import com.example.fooddeliveryaut.config.ServiceNamesProperties;
import com.example.fooddeliveryaut.dto.*;
import com.example.fooddeliveryaut.mapper.UserMapper;
import com.example.fooddeliveryaut.model.User;
import com.example.fooddeliveryaut.repository.UserRepository;
import com.example.fooddeliveryaut.service.UserLocationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class UserLocationServiceImpl implements UserLocationService {

    private final UserRepository userRepository;
    private final UserMapper userMapper;
    private final RestTemplate restTemplate; // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å @LoadBalanced
    private final LocationConfigProperties locationConfig;
    private final ServiceNamesProperties serviceNames;

    /**
     * üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Override
    @Transactional
    public UserResponseDto updateUserLocation(Long userId, UpdateUserLocationDto locationDto) {
        log.info("üåç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

        User user = findUserById(userId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        user.updateLocation(locationDto.getLatitude(), locationDto.getLongitude());

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥—Ä–µ—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if (locationDto.getStreet() != null) {
            updateUserAddressFields(user, locationDto);
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞, –Ω–æ –≤–∫–ª—é—á–µ–Ω–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        else if (Boolean.TRUE.equals(locationDto.getAutoGeocode()) &&
                user.getFullAddress() == null) {
            performReverseGeocoding(user, locationDto.getLongitude(), locationDto.getLatitude());
        }

        User savedUser = userRepository.save(user);
        log.info("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: [{}, {}]",
                userId, savedUser.getLatitude(), savedUser.getLongitude());

        return userMapper.toResponseDto(savedUser);
    }

    /**
     * üè† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    @Override
    @Transactional
    public UserResponseDto updateUserAddress(Long userId, UpdateUserAddressDto addressDto) {
        log.info("üè† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

        User user = findUserById(userId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
        user.setStreet(addressDto.getStreet());
        user.setCity(addressDto.getCity());
        user.setRegion(addressDto.getRegion());
        user.setCountry(addressDto.getCountry());
        user.setPostalCode(addressDto.getPostalCode());
        user.setFullAddress(user.getFormattedAddress());

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (Boolean.TRUE.equals(addressDto.getAutoGeocode())) {
            performForwardGeocoding(user);
        }

        User savedUser = userRepository.save(user);
        log.info("‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ–±–Ω–æ–≤–ª–µ–Ω: {}", userId, savedUser.getFullAddress());

        return userMapper.toResponseDto(savedUser);
    }

    /**
     * üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Override
    @Transactional(readOnly = true)
    public UserLocationDto getUserLocation(Long userId) {
        log.debug("üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

        User user = findUserById(userId);

        return UserLocationDto.builder()
                .latitude(user.getLatitude())
                .longitude(user.getLongitude())
                .street(user.getStreet())
                .city(user.getCity())
                .region(user.getRegion())
                .country(user.getCountry())
                .postalCode(user.getPostalCode())
                .fullAddress(user.getFullAddress())
                .locationUpdatedAt(user.getLocationUpdatedAt())
                .hasLocation(user.hasLocation())
                .formattedCoordinates(formatCoordinates(user.getLatitude(), user.getLongitude()))
                .shortAddress(formatShortAddress(user.getCity(), user.getCountry()))
                .build();
    }

    /**
     * üîç –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    @Override
    @Transactional(readOnly = true)
    public List<NearbyStoreDto> findNearbyStores(Long userId, FindNearbyStoresDto searchDto) {
        log.info("üîç –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

        User user = findUserById(userId);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
        BigDecimal latitude = searchDto.getLatitude() != null ?
                searchDto.getLatitude() : user.getLatitude();
        BigDecimal longitude = searchDto.getLongitude() != null ?
                searchDto.getLongitude() : user.getLongitude();

        if (latitude == null || longitude == null) {
            throw new RuntimeException("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ.");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º DTO —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        searchDto.setLatitude(latitude);
        searchDto.setLongitude(longitude);

        // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        List<NearbyStoreDto> nearbyStores = callStoreServiceForNearbyStores(searchDto);

        log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ {} –∫–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                nearbyStores.size(), searchDto.getRadiusKm(), userId);

        return nearbyStores;
    }

    /**
     * üìè –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –º–∞–≥–∞–∑–∏–Ω–æ–º
     */
    @Override
    @Transactional(readOnly = true)
    public DistanceCalculationDto calculateDistanceToStore(Long userId, Long storeId) {
        log.debug("üìè –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –¥–æ –º–∞–≥–∞–∑–∏–Ω–∞ {}", userId, storeId);

        User user = findUserById(userId);

        if (!user.hasLocation()) {
            throw new RuntimeException("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ API
        StoreLocationDto  storeLocation = getStoreLocation(storeId);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        double distanceKm = calculateDistanceInKm(
                user.getLatitude(), user.getLongitude(),
                storeLocation.getLatitude(), storeLocation.getLongitude()
        );

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        int deliveryTime = calculateDeliveryTime(distanceKm);
        BigDecimal deliveryFee = calculateDeliveryFee(distanceKm);

        return DistanceCalculationDto.builder()
                .storeId(storeId)
                .storeName(storeLocation.getName())
                .distanceKm(distanceKm)
                .distanceText(formatDistance(distanceKm))
                .estimatedDeliveryTime(deliveryTime)
                .deliveryFee(deliveryFee)
                .calculatedAt(LocalDateTime.now())
                .build();
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @Override
    @Transactional(readOnly = true)
    public UserLocationStatsDto getUserLocationStats() {
        log.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

        long totalUsers = userRepository.count();
        long usersWithLocation = userRepository.countUsersWithLocation();
        long usersWithoutLocation = totalUsers - usersWithLocation;
        double locationCoverage = totalUsers > 0 ? (double) usersWithLocation / totalUsers * 100 : 0;

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime todayStart = now.truncatedTo(ChronoUnit.DAYS);
        LocalDateTime weekStart = now.minusWeeks(1);
        LocalDateTime monthStart = now.minusMonths(1);

        long locationsUpdatedToday = userRepository.countUsersWithLocationUpdatedToday();
        long locationsUpdatedThisWeek = userRepository.countUsersWithLocationUpdatedThisWeek(weekStart);
        long locationsUpdatedThisMonth = userRepository.countUsersWithLocationUpdatedThisMonth(monthStart);

        // –¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤
        List<CityStatsDto> topCities = userRepository.getCityStatistics().stream()
                .limit(10)
                .collect(Collectors.toList());

        return UserLocationStatsDto.builder()
                .totalUsers(totalUsers)
                .usersWithLocation(usersWithLocation)
                .usersWithoutLocation(usersWithoutLocation)
                .locationCoverage(locationCoverage)
                .topCities(topCities)
                .locationsUpdatedToday(locationsUpdatedToday)
                .locationsUpdatedThisWeek(locationsUpdatedThisWeek)
                .locationsUpdatedThisMonth(locationsUpdatedThisMonth)
                .build();
    }

    /**
     * üßπ –û—á–∏—Å—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Override
    @Transactional
    public UserResponseDto clearUserLocation(Long userId) {
        log.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

        User user = findUserById(userId);
        user.clearLocation();

        User savedUser = userRepository.save(user);
        log.info("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ—á–∏—â–µ–Ω–∞", userId);

        return userMapper.toResponseDto(savedUser);
    }

    // === PRIVATE UTILITY –ú–ï–¢–û–î–´ ===

    private User findUserById(Long userId) {
        return userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    private void updateUserAddressFields(User user, UpdateUserLocationDto locationDto) {
        user.setStreet(locationDto.getStreet());
        user.setCity(locationDto.getCity());
        user.setRegion(locationDto.getRegion());
        user.setCountry(locationDto.getCountry());
        user.setPostalCode(locationDto.getPostalCode());
        user.setFullAddress(user.getFormattedAddress());

        log.debug("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getFormattedAddress());
    }

    private void performReverseGeocoding(User user, BigDecimal longitude, BigDecimal latitude) {
        try {
//             –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MapboxGeocodingService
//             String address = geocodingService.reverseGeocode(longitude, latitude);
//             user.setFullAddress(address);

            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            String address = String.format("–ê–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º %s, %s", latitude, longitude);
            user.setFullAddress(address);
            log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ reverse geocoding: {}", address);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ reverse geocoding: {}", e.getMessage());
        }
    }

    private void performForwardGeocoding(User user) {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MapboxGeocodingService
            // GeoLocation coordinates = geocodingService.geocodeAddress(user.getFormattedAddress());
            // user.setLatitude(coordinates.getLatitude());
            // user.setLongitude(coordinates.getLongitude());
            // user.setLocationUpdatedAt(LocalDateTime.now());

            log.info("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ geocoding –¥–ª—è –∞–¥—Ä–µ—Å–∞: {}", user.getFormattedAddress());

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ geocoding: {}", e.getMessage());
        }
    }

    private List<NearbyStoreDto> callStoreServiceForNearbyStores(FindNearbyStoresDto searchDto) {
        try {
            // üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º Eureka –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É –º–∞–≥–∞–∑–∏–Ω–æ–≤
            String url = "http://" + serviceNames.getProductService() + "/api/stores/nearby";

            log.debug("üîó –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {}", url);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
            NearbyStoreDto[] response = restTemplate.postForObject(url, searchDto, NearbyStoreDto[].class);

            if (response != null) {
                List<NearbyStoreDto> stores = List.of(response);
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ {}", stores.size(), serviceNames.getProductService());
                return stores;
            }

            log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤");
            return List.of();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Å–µ—Ä–≤–∏—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ Eureka: {}", e.getMessage());

            // üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            log.info("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏");
            return createMockStores(searchDto);
        }
    }

    private StoreLocationDto getStoreLocation(Long storeId) {
        try {
            // üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º Eureka –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
            String url = "http://" + serviceNames.getProductService() + "/api/stores/" + storeId + "/location";

            log.debug("üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {}", url);

            StoreLocationDto storeLocation = restTemplate.getForObject(url, StoreLocationDto.class);

            if (storeLocation != null) {
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ {} –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ {}", storeId, serviceNames.getProductService());
                return storeLocation;
            }

            throw new RuntimeException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {} —á–µ—Ä–µ–∑ Eureka: {}", storeId, e.getMessage());

            // üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            log.info("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {}", storeId);
            return createMockStoreLocation(storeId);
        }
    }

    // üß™ –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    private List<NearbyStoreDto> createMockStores(FindNearbyStoresDto searchDto) {
        return List.of(
                NearbyStoreDto.builder()
                        .storeId(1L)
                        .name("–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω 1")
                        .description("–û–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞")
                        .category("–§–∞—Å—Ç—Ñ—É–¥")
                        .latitude(searchDto.getLatitude().add(new BigDecimal("0.01")))
                        .longitude(searchDto.getLongitude().add(new BigDecimal("0.01")))
                        .distanceKm(1.2)
                        .distanceText("1.2 –∫–º")
                        .estimatedDeliveryTime(25)
                        .rating(4.5)
                        .isOpen(true)
                        .deliveryFee(new BigDecimal("100"))
                        .minOrderAmount(new BigDecimal("500"))
                        .build(),
                NearbyStoreDto.builder()
                        .storeId(2L)
                        .name("–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω 2")
                        .description("–ï—â–µ –æ–¥–∏–Ω –º–∞–≥–∞–∑–∏–Ω")
                        .category("–ü–∏—Ü—Ü–∞")
                        .latitude(searchDto.getLatitude().add(new BigDecimal("0.02")))
                        .longitude(searchDto.getLongitude().add(new BigDecimal("0.02")))
                        .distanceKm(2.1)
                        .distanceText("2.1 –∫–º")
                        .estimatedDeliveryTime(35)
                        .rating(4.2)
                        .isOpen(true)
                        .deliveryFee(new BigDecimal("150"))
                        .minOrderAmount(new BigDecimal("700"))
                        .build()
        );
    }

    private StoreLocationDto  createMockStoreLocation(Long storeId) {
        return StoreLocationDto.builder()
                .storeId(storeId)
                .name("–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω " + storeId)
                .latitude(new BigDecimal("50.4501"))
                .longitude(new BigDecimal("30.5234"))
                .address("–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞ " + storeId)
                .build();
    }

    /**
     * üìè –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ Haversine
     */
    private double calculateDistanceInKm(BigDecimal lat1, BigDecimal lon1,
                                         BigDecimal lat2, BigDecimal lon2) {
        final double R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º

        double latDistance = Math.toRadians(lat2.doubleValue() - lat1.doubleValue());
        double lonDistance = Math.toRadians(lon2.doubleValue() - lon1.doubleValue());

        double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
                + Math.cos(Math.toRadians(lat1.doubleValue()))
                * Math.cos(Math.toRadians(lat2.doubleValue()))
                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);

        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c;
    }

    private String formatDistance(double distanceKm) {
        if (distanceKm < 1) {
            return String.format("%.0f –º", distanceKm * 1000);
        }
        return String.format("%.1f –∫–º", distanceKm);
    }

    private String formatCoordinates(BigDecimal latitude, BigDecimal longitude) {
        if (latitude == null || longitude == null) {
            return null;
        }
        return String.format("%.6f, %.6f", latitude, longitude);
    }

    private String formatShortAddress(String city, String country) {
        if (city == null && country == null) {
            return null;
        }
        if (city != null && country != null) {
            return city + ", " + country;
        }
        return city != null ? city : country;
    }

    private int calculateDeliveryTime(double distanceKm) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return (int) Math.round(
                (distanceKm / locationConfig.getDelivery().getSpeedKmh()) * 60 +
                        locationConfig.getDelivery().getBaseTimeMinutes()
        );
    }

    private BigDecimal calculateDeliveryFee(double distanceKm) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        BigDecimal baseFee = locationConfig.getDelivery().getBaseFee();
        BigDecimal perKmFee = locationConfig.getDelivery().getFeePerKm();
        BigDecimal distanceFee = perKmFee.multiply(BigDecimal.valueOf(distanceKm));

        return baseFee.add(distanceFee);
    }
}


