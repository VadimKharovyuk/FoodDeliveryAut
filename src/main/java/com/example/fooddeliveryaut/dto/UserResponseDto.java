package com.example.fooddeliveryaut.dto;

import com.example.fooddeliveryaut.enums.UserRole;
import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UserResponseDto {

    // === –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
    private Long id;
    private String email;
    private String firstName;
    private String lastName;
    private UserRole userRole;
    private String roleDisplayName;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime createdAt;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime updatedAt;

    // === –ì–ï–û–õ–û–ö–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===

    /**
     * üìç –®–∏—Ä–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private BigDecimal latitude;

    /**
     * üìç –î–æ–ª–≥–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private BigDecimal longitude;

    /**
     * üè† –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String street;
    private String city;
    private String region;
    private String country;
    private String postalCode;

    /**
     * üìç –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
     */
    private String fullAddress;

    /**
     * üïê –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
     */
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime locationUpdatedAt;

    // === COMPUTED FIELDS (–≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è) ===

    /**
     * üìç –ï—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
     */
    private Boolean hasLocation;

    /**
     * üìç –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * –ù–∞–ø—Ä–∏–º–µ—Ä: "50.450100, 30.523400"
     */
    private String formattedCoordinates;

    /**
     * üè† –ö—Ä–∞—Ç–∫–∏–π –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞)
     * –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–∏–µ–≤, –£–∫—Ä–∞–∏–Ω–∞"
     */
    private String shortAddress;

    /**
     * üìä –°—Ç–∞—Ç—É—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è UI
     * –ù–∞–ø—Ä–∏–º–µ—Ä: "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "–£—Å—Ç–∞—Ä–µ–ª–∞"
     */
    private String locationStatus;

    // === HELPER –ú–ï–¢–û–î–´ ===

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏
     */
    public String getRoleDisplayName() {
        if (roleDisplayName != null) {
            return roleDisplayName;
        }

        return userRole != null ? switch (userRole) {
            case ADMIN -> "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
            case BASE_USER -> "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
            case BUSINESS_USER -> "–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞";
            case COURIER -> "–ö—É—Ä—å–µ—Ä"; // –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ä–æ–ª—å
        } : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å";
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
     */
    public Boolean getHasLocation() {
        if (hasLocation != null) {
            return hasLocation;
        }
        return latitude != null && longitude != null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
     */
    public String getLocationStatus() {
        if (locationStatus != null) {
            return locationStatus;
        }

        if (!getHasLocation()) {
            return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
        }

        if (locationUpdatedAt == null) {
            return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        LocalDateTime now = LocalDateTime.now();
        if (locationUpdatedAt.isBefore(now.minusDays(30))) {
            return "–£—Å—Ç–∞—Ä–µ–ª–∞";
        }

        return "–ê–∫—Ç—É–∞–ª—å–Ω–∞";
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
     */
    public String getFormattedCoordinates() {
        if (formattedCoordinates != null) {
            return formattedCoordinates;
        }

        if (latitude != null && longitude != null) {
            return String.format("%.6f, %.6f", latitude, longitude);
        }

        return null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∞–¥—Ä–µ—Å
     */
    public String getShortAddress() {
        if (shortAddress != null) {
            return shortAddress;
        }

        if (city == null && country == null) {
            return null;
        }

        if (city != null && country != null) {
            return city + ", " + country;
        }

        return city != null ? city : country;
    }
}