package com.example.fooddeliveryaut.config.security;

import com.example.fooddeliveryaut.dto.ApiResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;

/**
 * üîê –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (401 Unauthorized)
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ApiResponse –¥–ª—è –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
@Component
@Slf4j
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {

    private final ObjectMapper objectMapper;

    public JwtAuthenticationEntryPoint() {
        this.objectMapper = new ObjectMapper();
        this.objectMapper.registerModule(new JavaTimeModule()); // –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ LocalDateTime
    }

    @Override
    public void commence(HttpServletRequest request,
                         HttpServletResponse response,
                         AuthenticationException authException) throws IOException {

        log.error("üîí –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {}: {}", request.getRequestURI(), authException.getMessage());

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        String errorMessage;
        String errorCode;

        String exceptionMessage = authException.getMessage().toLowerCase();

        if (exceptionMessage.contains("jwt") || exceptionMessage.contains("token")) {
            errorMessage = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω";
            errorCode = "INVALID_TOKEN";
        } else if (exceptionMessage.contains("expired")) {
            errorMessage = "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫";
            errorCode = "TOKEN_EXPIRED";
        } else if (exceptionMessage.contains("malformed")) {
            errorMessage = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞";
            errorCode = "MALFORMED_TOKEN";
        } else if (exceptionMessage.contains("signature")) {
            errorMessage = "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞";
            errorCode = "INVALID_SIGNATURE";
        } else {
            errorMessage = "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è";
            errorCode = "UNAUTHORIZED";
        }

        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ApiResponse –¥–ª—è –æ—à–∏–±–∫–∏
        ApiResponse<Object> apiResponse = ApiResponse.<Object>builder()
                .success(false)
                .message(errorMessage)
                .errorCode(errorCode)
                .errorDetails(authException.getMessage())
                .path(request.getRequestURI())
                .build();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º response
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
        response.setCharacterEncoding("UTF-8");
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º JSON –æ—Ç–≤–µ—Ç
        String jsonResponse = objectMapper.writeValueAsString(apiResponse);
        response.getWriter().write(jsonResponse);

        log.debug("üîí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {}", jsonResponse);
    }
}