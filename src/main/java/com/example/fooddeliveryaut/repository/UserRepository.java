package com.example.fooddeliveryaut.repository;

import com.example.fooddeliveryaut.dto.CityStatsDto;
import com.example.fooddeliveryaut.dto.CountryStatsDto;
import com.example.fooddeliveryaut.dto.UserProjection;
import com.example.fooddeliveryaut.enums.UserRole;
import com.example.fooddeliveryaut.model.User;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {

    // üìß –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞
    Optional<User> findByEmail(String email);
    boolean existsByEmail(String email);

    // üéØ Projection –º–µ—Ç–æ–¥—ã —Å @Query
    @Query("SELECT u.id as id, u.email as email, u.firstName as firstName, " +
            "u.lastName as lastName, u.userRole as userRole " +
            "FROM User u WHERE u.email = :email")
    Optional<UserProjection> findProjectionByEmail(@Param("email") String email);

    @Query("SELECT u.id as id, u.email as email, u.firstName as firstName, " +
            "u.lastName as lastName, u.userRole as userRole " +
            "FROM User u")
    List<UserProjection> findAllProjections();

    @Query("SELECT u.id as id, u.email as email, u.firstName as firstName, " +
            "u.lastName as lastName, u.userRole as userRole " +
            "FROM User u WHERE u.id = :id")
    Optional<UserProjection> findProjectionById(@Param("id") Long id);

    // üîß –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏
    boolean existsByUserRole(UserRole userRole);

    // üåç === –ì–ï–û–õ–û–ö–ê–¶–ò–Ø –ú–ï–¢–û–î–´ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –î–õ–Ø POSTGRESQL) === üåç

    /**
     * üìä –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±–Ω–æ–≤–∏–≤—à–∏—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å–µ–≥–æ–¥–Ω—è
     * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è PostgreSQL
     */
    @Query("SELECT COUNT(u) FROM User u WHERE CAST(u.locationUpdatedAt AS date) = CURRENT_DATE")
    long countUsersWithLocationUpdatedToday();

    /**
     * üìä –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ native SQL –¥–ª—è –±–æ–ª—å—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     */
    @Query(value = "SELECT COUNT(*) FROM users u WHERE DATE(u.location_updated_at) = CURRENT_DATE",
            nativeQuery = true)
    long countUsersWithLocationUpdatedTodayNative();

    /**
     * üìä –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±–Ω–æ–≤–∏–≤—à–∏—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
     */
    @Query("SELECT COUNT(u) FROM User u WHERE u.locationUpdatedAt >= :weekStart")
    long countUsersWithLocationUpdatedThisWeek(@Param("weekStart") LocalDateTime weekStart);

    /**
     * üìä –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±–Ω–æ–≤–∏–≤—à–∏—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
     */
    @Query("SELECT COUNT(u) FROM User u WHERE u.locationUpdatedAt >= :monthStart")
    long countUsersWithLocationUpdatedThisMonth(@Param("monthStart") LocalDateTime monthStart);

    /**
     * üìä –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
     */
    @Query("SELECT COUNT(u) FROM User u WHERE u.latitude IS NOT NULL AND u.longitude IS NOT NULL")
    long countUsersWithLocation();

    /**
     * üìä –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
     */
    @Query("SELECT COUNT(u) FROM User u WHERE u.latitude IS NULL OR u.longitude IS NULL")
    long countUsersWithoutLocation();

    /**
     * üìä –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
     */
    long countByLatitudeIsNotNullAndLongitudeIsNotNull();

    /**
     * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º (–≤—Å–µ –≥–æ—Ä–æ–¥–∞) - –ò–°–ü–†–ê–í–õ–ï–ù–û
     */
    @Query("""
        SELECT new com.example.fooddeliveryaut.dto.CityStatsDto(
            u.city, 
            u.country, 
            COUNT(u), 
            (COUNT(u) * 100.0 / (SELECT COUNT(total) FROM User total))
        )
        FROM User u 
        WHERE u.city IS NOT NULL 
        GROUP BY u.city, u.country 
        ORDER BY COUNT(u) DESC
        """)
    List<CityStatsDto> getCityStatistics();

    /**
     * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
     */
    @Query("""
        SELECT new com.example.fooddeliveryaut.dto.CountryStatsDto(
            u.country, 
            COUNT(u), 
            (COUNT(u) * 100.0 / (SELECT COUNT(total) FROM User total))
        )
        FROM User u 
        WHERE u.country IS NOT NULL 
        GROUP BY u.country 
        ORDER BY COUNT(u) DESC
        """)
    List<CountryStatsDto> getCountryStatistics();

    /**
     * üìä –¢–æ–ø N –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ native SQL
     */
    @Query(value = """
        SELECT u.city, 
               u.country, 
               COUNT(*) as user_count,
               (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users)) as percentage
        FROM users u 
        WHERE u.city IS NOT NULL 
        GROUP BY u.city, u.country 
        ORDER BY user_count DESC 
        LIMIT :limit
        """, nativeQuery = true)
    List<Object[]> getTopCitiesNative(@Param("limit") int limit);

    // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –æ—Ç —Ç–æ—á–∫–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É Haversine –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
     */
    @Query(value = """
        SELECT u.*, 
               (6371 * acos(cos(radians(:latitude)) * cos(radians(u.latitude)) * 
                           cos(radians(u.longitude) - radians(:longitude)) + 
                           sin(radians(:latitude)) * sin(radians(u.latitude)))) AS distance
        FROM users u 
        WHERE u.latitude IS NOT NULL 
          AND u.longitude IS NOT NULL
        HAVING distance <= :radiusKm 
        ORDER BY distance
        """, nativeQuery = true)
    List<User> findUsersWithinRadius(@Param("latitude") BigDecimal latitude,
                                     @Param("longitude") BigDecimal longitude,
                                     @Param("radiusKm") Double radiusKm);

    /**
     * üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–±–Ω–æ–≤–∏–≤—à–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
     */
    @Query("SELECT u FROM User u WHERE u.locationUpdatedAt >= :fromDate")
    List<User> findUsersWithLocationUpdatedAfter(@Param("fromDate") LocalDateTime fromDate);

    /**
     * üìä –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±–Ω–æ–≤–∏–≤—à–∏—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
     */
    @Query("SELECT COUNT(u) FROM User u WHERE u.locationUpdatedAt >= :fromDate")
    long countUsersWithLocationUpdatedSince(@Param("fromDate") LocalDateTime fromDate);

    /**
     * üìä –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
     */
    @Query("SELECT u FROM User u WHERE u.latitude IS NULL OR u.longitude IS NULL")
    List<User> findUsersWithoutLocation();

    /**
     * üìä –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
     */
    @Query("SELECT u FROM User u WHERE u.locationUpdatedAt < :cutoffDate OR u.locationUpdatedAt IS NULL")
    List<User> findUsersWithOutdatedLocation(@Param("cutoffDate") LocalDateTime cutoffDate);

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
     */
    List<User> findByCityIgnoreCase(String city);

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥—É –∏ —Å—Ç—Ä–∞–Ω–µ
     */
    List<User> findByCityIgnoreCaseAndCountryIgnoreCase(String city, String country);

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ/—Å—Ç—Ä–∞–Ω–µ
     */
    List<User> findByCountryIgnoreCase(String country);
    List<User> findByRegionIgnoreCase(String region);

    /**
     * üìä –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö (bounding box)
     */
    @Query("""
        SELECT u FROM User u 
        WHERE u.latitude BETWEEN :minLat AND :maxLat 
          AND u.longitude BETWEEN :minLng AND :maxLng
        """)
    List<User> findUsersInBoundingBox(@Param("minLat") BigDecimal minLatitude,
                                      @Param("maxLat") BigDecimal maxLatitude,
                                      @Param("minLng") BigDecimal minLongitude,
                                      @Param("maxLng") BigDecimal maxLongitude);

    /**
     * üìä –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
     */
    @Query("SELECT CASE WHEN u.latitude IS NOT NULL AND u.longitude IS NOT NULL THEN true ELSE false END FROM User u WHERE u.id = :userId")
    boolean hasUserLocation(@Param("userId") Long userId);

    /**
     * üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ native SQL –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    @Query(value = """
        SELECT 
            CASE 
                WHEN location_updated_at >= CURRENT_DATE THEN '–°–µ–≥–æ–¥–Ω—è'
                WHEN location_updated_at >= CURRENT_DATE - INTERVAL '7 days' THEN '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ'
                WHEN location_updated_at >= CURRENT_DATE - INTERVAL '30 days' THEN '–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ'
                WHEN location_updated_at IS NOT NULL THEN '–°—Ç–∞—Ä—à–µ –º–µ—Å—è—Ü–∞'
                ELSE '–ù–∏–∫–æ–≥–¥–∞'
            END as period,
            COUNT(*) as count
        FROM users 
        GROUP BY 
            CASE 
                WHEN location_updated_at >= CURRENT_DATE THEN '–°–µ–≥–æ–¥–Ω—è'
                WHEN location_updated_at >= CURRENT_DATE - INTERVAL '7 days' THEN '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ'
                WHEN location_updated_at >= CURRENT_DATE - INTERVAL '30 days' THEN '–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ'
                WHEN location_updated_at IS NOT NULL THEN '–°—Ç–∞—Ä—à–µ –º–µ—Å—è—Ü–∞'
                ELSE '–ù–∏–∫–æ–≥–¥–∞'
            END
        ORDER BY 
            CASE 
                WHEN period = '–°–µ–≥–æ–¥–Ω—è' THEN 1
                WHEN period = '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ' THEN 2
                WHEN period = '–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ' THEN 3
                WHEN period = '–°—Ç–∞—Ä—à–µ –º–µ—Å—è—Ü–∞' THEN 4
                ELSE 5
            END
        """, nativeQuery = true)
    List<Object[]> getLocationUpdateDistribution();

    /**
     * üìä –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ
     */
    @Query(value = """
        SELECT u1.city,
               AVG(
                   6371 * acos(
                       cos(radians(u1.latitude)) * cos(radians(u2.latitude)) * 
                       cos(radians(u2.longitude) - radians(u1.longitude)) + 
                       sin(radians(u1.latitude)) * sin(radians(u2.latitude))
                   )
               ) as avg_distance_km
        FROM users u1
        JOIN users u2 ON u1.city = u2.city AND u1.id != u2.id
        WHERE u1.latitude IS NOT NULL 
          AND u1.longitude IS NOT NULL
          AND u2.latitude IS NOT NULL 
          AND u2.longitude IS NOT NULL
          AND u1.city IS NOT NULL
        GROUP BY u1.city
        HAVING COUNT(*) > 1
        ORDER BY avg_distance_km DESC
        """, nativeQuery = true)
    List<Object[]> getAverageDistanceByCity();
}