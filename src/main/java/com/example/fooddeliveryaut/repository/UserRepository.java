package com.example.fooddeliveryaut.repository;

import com.example.fooddeliveryaut.dto.UserProjection;
import com.example.fooddeliveryaut.enums.UserRole;
import com.example.fooddeliveryaut.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {

    // –û–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    Optional<User> findByEmail(String email);
    boolean existsByEmail(String email);

    // üéØ Projection –º–µ—Ç–æ–¥—ã —Å @Query
    @Query("SELECT u.id as id, u.email as email, u.firstName as firstName, " +
            "u.lastName as lastName, u.userRole as userRole " +
            "FROM User u WHERE u.email = :email")
    Optional<UserProjection> findProjectionByEmail(@Param("email") String email);

    @Query("SELECT u.id as id, u.email as email, u.firstName as firstName, " +
            "u.lastName as lastName, u.userRole as userRole " +
            "FROM User u")
    List<UserProjection> findAllProjections();

    @Query("SELECT u.id as id, u.email as email, u.firstName as firstName, " +
            "u.lastName as lastName, u.userRole as userRole " +
            "FROM User u WHERE u.id = :id")
    Optional<UserProjection> findProjectionById(@Param("id") Long id);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏ –ø–æ —Ä–æ–ª–∏
    @Query("SELECT u.id as id, u.email as email, u.firstName as firstName, " +
            "u.lastName as lastName, u.userRole as userRole " +
            "FROM User u WHERE u.userRole = :role")
    List<UserProjection> findProjectionsByRole(@Param("role") UserRole role);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º userRole –≤–º–µ—Å—Ç–æ role
    boolean existsByUserRole(UserRole userRole);

    long countByUserRole(UserRole userRole);

    Optional<User> findFirstByUserRole(UserRole userRole);

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @Query –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    @Query("SELECT COUNT(u) > 0 FROM User u WHERE u.userRole = :role")
    boolean existsUserWithRole(@Param("role") UserRole role);

    @Query("SELECT COUNT(u) FROM User u WHERE u.userRole = :role")
    long countUsersWithRole(@Param("role") UserRole role);
}