//package com.example.fooddeliveryaut.mapper;
//
//import com.example.fooddeliveryaut.dto.UserResponseDto;
//import com.example.fooddeliveryaut.model.User;
//import org.springframework.stereotype.Component;
//@Component
//public class UserMapper {
//
//
//    public UserResponseDto toResponseDto(User user) {
//        if (user == null) {
//            return null;
//        }
//
//        return UserResponseDto.builder()
//                .id(user.getId())
//                .email(user.getEmail())
//                .firstName(user.getFirstName())
//                .lastName(user.getLastName())
//                .userRole(user.getUserRole())
//                .roleDisplayName(user.getUserRole() != null ?
//                        user.getUserRole().getDisplayName() : null)
//                .createdAt(user.getCreatedAt())
//                .updatedAt(user.getUpdatedAt())
//                .build();
//    }
//}

package com.example.fooddeliveryaut.mapper;

import com.example.fooddeliveryaut.dto.UserResponseDto;
import com.example.fooddeliveryaut.enums.UserRole;
import com.example.fooddeliveryaut.model.User;
import org.springframework.stereotype.Component;

/**
 * üîÑ –ú–∞–ø–ø–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ User entity –≤ DTO –∏ –æ–±—Ä–∞—Ç–Ω–æ
 * –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
 */
@Component
public class UserMapper {

    /**
     * üì§ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è User entity –≤ UserResponseDto
     */
    public UserResponseDto toResponseDto(User user) {
        if (user == null) {
            return null;
        }

        return UserResponseDto.builder()
                // === –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
                .id(user.getId())
                .email(user.getEmail())
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .userRole(user.getUserRole())
                .roleDisplayName(getRoleDisplayName(user.getUserRole()))
                .createdAt(user.getCreatedAt())
                .updatedAt(user.getUpdatedAt())

                // === –ì–ï–û–õ–û–ö–ê–¶–ò–Ø ===
                .latitude(user.getLatitude())
                .longitude(user.getLongitude())
                .street(user.getStreet())
                .city(user.getCity())
                .region(user.getRegion())
                .country(user.getCountry())
                .postalCode(user.getPostalCode())
                .fullAddress(user.getFullAddress())
                .locationUpdatedAt(user.getLocationUpdatedAt())

                // === COMPUTED FIELDS ===
                .hasLocation(user.hasLocation())
                .formattedCoordinates(formatCoordinates(user.getLatitude(), user.getLongitude()))
                .shortAddress(formatShortAddress(user.getCity(), user.getCountry()))
                .locationStatus(getLocationStatus(user))

                .build();
    }

    /**
     * üì• –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è UserResponseDto –≤ User entity (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
     * –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
     */
    public void updateUserFromDto(User user, UserResponseDto dto) {
        if (user == null || dto == null) {
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–ª—è
        user.setFirstName(dto.getFirstName());
        user.setLastName(dto.getLastName());

        // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞)
        if (dto.getLatitude() != null && dto.getLongitude() != null) {
            user.setLatitude(dto.getLatitude());
            user.setLongitude(dto.getLongitude());
        }

        if (dto.getStreet() != null) {
            user.setStreet(dto.getStreet());
        }
        if (dto.getCity() != null) {
            user.setCity(dto.getCity());
        }
        if (dto.getRegion() != null) {
            user.setRegion(dto.getRegion());
        }
        if (dto.getCountry() != null) {
            user.setCountry(dto.getCountry());
        }
        if (dto.getPostalCode() != null) {
            user.setPostalCode(dto.getPostalCode());
        }
        if (dto.getFullAddress() != null) {
            user.setFullAddress(dto.getFullAddress());
        }
    }

    // === UTILITY –ú–ï–¢–û–î–´ ===

    /**
     * üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–æ–ª–∏
     */
    private String getRoleDisplayName(UserRole userRole) {
        if (userRole == null) {
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å";
        }

        return switch (userRole) {
            case ADMIN -> "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
            case BASE_USER -> "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
            case BUSINESS_USER -> "–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞";
            case COURIER -> "–ö—É—Ä—å–µ—Ä"; // –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ä–æ–ª—å
        };
    }

    /**
     * üìç –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String formatCoordinates(java.math.BigDecimal latitude, java.math.BigDecimal longitude) {
        if (latitude == null || longitude == null) {
            return null;
        }
        return String.format("%.6f, %.6f", latitude, longitude);
    }

    /**
     * üè† –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞
     */
    private String formatShortAddress(String city, String country) {
        if (city == null && country == null) {
            return null;
        }
        if (city != null && country != null) {
            return city + ", " + country;
        }
        return city != null ? city : country;
    }

    /**
     * üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
     */
    private String getLocationStatus(User user) {
        if (!user.hasLocation()) {
            return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
        }

        if (user.getLocationUpdatedAt() == null) {
            return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        java.time.LocalDateTime now = java.time.LocalDateTime.now();
        if (user.getLocationUpdatedAt().isBefore(now.minusDays(30))) {
            return "–£—Å—Ç–∞—Ä–µ–ª–∞";
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
        if (user.getLocationUpdatedAt().isAfter(now.minusWeeks(1))) {
            return "–ê–∫—Ç—É–∞–ª—å–Ω–∞";
        }

        return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
    }

    /**
     * üìã –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ DTO —Ç–æ–ª—å–∫–æ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏)
     */
    public UserResponseDto toBasicResponseDto(User user) {
        if (user == null) {
            return null;
        }

        return UserResponseDto.builder()
                .id(user.getId())
                .email(user.getEmail())
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .userRole(user.getUserRole())
                .roleDisplayName(getRoleDisplayName(user.getUserRole()))
                .createdAt(user.getCreatedAt())
                .updatedAt(user.getUpdatedAt())
                .hasLocation(user.hasLocation())
                .locationStatus(getLocationStatus(user))
                .build();
    }

    /**
     * üìç –°–æ–∑–¥–∞–Ω–∏–µ DTO —Ç–æ–ª—å–∫–æ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö endpoints)
     */
    public UserResponseDto toLocationOnlyDto(User user) {
        if (user == null) {
            return null;
        }

        return UserResponseDto.builder()
                .id(user.getId())
                .latitude(user.getLatitude())
                .longitude(user.getLongitude())
                .street(user.getStreet())
                .city(user.getCity())
                .region(user.getRegion())
                .country(user.getCountry())
                .postalCode(user.getPostalCode())
                .fullAddress(user.getFullAddress())
                .locationUpdatedAt(user.getLocationUpdatedAt())
                .hasLocation(user.hasLocation())
                .formattedCoordinates(formatCoordinates(user.getLatitude(), user.getLongitude()))
                .shortAddress(formatShortAddress(user.getCity(), user.getCountry()))
                .locationStatus(getLocationStatus(user))
                .build();
    }
}